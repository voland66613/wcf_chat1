//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyChatClient.wcf_chat {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="wcf_chat.IServiceChat", CallbackContract=typeof(MyChatClient.wcf_chat.IServiceChatCallback))]
    public interface IServiceChat {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Connect", ReplyAction="http://tempuri.org/IServiceChat/ConnectResponse")]
        int Connect(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Connect", ReplyAction="http://tempuri.org/IServiceChat/ConnectResponse")]
        System.Threading.Tasks.Task<int> ConnectAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Disconnect", ReplyAction="http://tempuri.org/IServiceChat/DisconnectResponse")]
        void Disconnect(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Disconnect", ReplyAction="http://tempuri.org/IServiceChat/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SendMsg")]
        void SendMsg(string msg, int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SendMsg")]
        System.Threading.Tasks.Task SendMsgAsync(string msg, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetUsersList", ReplyAction="http://tempuri.org/IServiceChat/GetUsersListResponse")]
        System.Collections.ObjectModel.Collection<string> GetUsersList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetUsersList", ReplyAction="http://tempuri.org/IServiceChat/GetUsersListResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.Collection<string>> GetUsersListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetUserName", ReplyAction="http://tempuri.org/IServiceChat/GetUserNameResponse")]
        string GetUserName(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetUserName", ReplyAction="http://tempuri.org/IServiceChat/GetUserNameResponse")]
        System.Threading.Tasks.Task<string> GetUserNameAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/AskAdresseeToPrivateMessage", ReplyAction="http://tempuri.org/IServiceChat/AskAdresseeToPrivateMessageResponse")]
        bool AskAdresseeToPrivateMessage(string adressee, string sender);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/AskAdresseeToPrivateMessage", ReplyAction="http://tempuri.org/IServiceChat/AskAdresseeToPrivateMessageResponse")]
        System.Threading.Tasks.Task<bool> AskAdresseeToPrivateMessageAsync(string adressee, string sender);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/RegistrateUsersAccaunt")]
        void RegistrateUsersAccaunt(string login, string password, string name, int age, int i);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/RegistrateUsersAccaunt")]
        System.Threading.Tasks.Task RegistrateUsersAccauntAsync(string login, string password, string name, int age, int i);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/DeleteUsersAccaunt")]
        void DeleteUsersAccaunt(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/DeleteUsersAccaunt")]
        System.Threading.Tasks.Task DeleteUsersAccauntAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/MayIComeIn")]
        void MayIComeIn(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/MayIComeIn")]
        System.Threading.Tasks.Task MayIComeInAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/MayIComeIn_v2", ReplyAction="http://tempuri.org/IServiceChat/MayIComeIn_v2Response")]
        bool MayIComeIn_v2(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/MayIComeIn_v2", ReplyAction="http://tempuri.org/IServiceChat/MayIComeIn_v2Response")]
        System.Threading.Tasks.Task<bool> MayIComeIn_v2Async(string login, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/OnMessageReceived")]
        void OnMessageReceived(string msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/OnUsersListChanged")]
        void OnUsersListChanged(System.Collections.ObjectModel.Collection<string> names);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/OnPrivateChatAskAccepted")]
        void OnPrivateChatAskAccepted(string adresseeName, string senderName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/OnMessageBoxShow")]
        void OnMessageBoxShow(string msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/OnEnterIntoChatIsAllowed")]
        void OnEnterIntoChatIsAllowed();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChatChannel : MyChatClient.wcf_chat.IServiceChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceChatClient : System.ServiceModel.DuplexClientBase<MyChatClient.wcf_chat.IServiceChat>, MyChatClient.wcf_chat.IServiceChat {
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int Connect(string name) {
            return base.Channel.Connect(name);
        }
        
        public System.Threading.Tasks.Task<int> ConnectAsync(string name) {
            return base.Channel.ConnectAsync(name);
        }
        
        public void Disconnect(int id) {
            base.Channel.Disconnect(id);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(int id) {
            return base.Channel.DisconnectAsync(id);
        }
        
        public void SendMsg(string msg, int id) {
            base.Channel.SendMsg(msg, id);
        }
        
        public System.Threading.Tasks.Task SendMsgAsync(string msg, int id) {
            return base.Channel.SendMsgAsync(msg, id);
        }
        
        public System.Collections.ObjectModel.Collection<string> GetUsersList() {
            return base.Channel.GetUsersList();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.Collection<string>> GetUsersListAsync() {
            return base.Channel.GetUsersListAsync();
        }
        
        public string GetUserName(int id) {
            return base.Channel.GetUserName(id);
        }
        
        public System.Threading.Tasks.Task<string> GetUserNameAsync(int id) {
            return base.Channel.GetUserNameAsync(id);
        }
        
        public bool AskAdresseeToPrivateMessage(string adressee, string sender) {
            return base.Channel.AskAdresseeToPrivateMessage(adressee, sender);
        }
        
        public System.Threading.Tasks.Task<bool> AskAdresseeToPrivateMessageAsync(string adressee, string sender) {
            return base.Channel.AskAdresseeToPrivateMessageAsync(adressee, sender);
        }
        
        public void RegistrateUsersAccaunt(string login, string password, string name, int age, int i) {
            base.Channel.RegistrateUsersAccaunt(login, password, name, age, i);
        }
        
        public System.Threading.Tasks.Task RegistrateUsersAccauntAsync(string login, string password, string name, int age, int i) {
            return base.Channel.RegistrateUsersAccauntAsync(login, password, name, age, i);
        }
        
        public void DeleteUsersAccaunt(string login, string password) {
            base.Channel.DeleteUsersAccaunt(login, password);
        }
        
        public System.Threading.Tasks.Task DeleteUsersAccauntAsync(string login, string password) {
            return base.Channel.DeleteUsersAccauntAsync(login, password);
        }
        
        public void MayIComeIn(string login, string password) {
            base.Channel.MayIComeIn(login, password);
        }
        
        public System.Threading.Tasks.Task MayIComeInAsync(string login, string password) {
            return base.Channel.MayIComeInAsync(login, password);
        }
        
        public bool MayIComeIn_v2(string login, string password) {
            return base.Channel.MayIComeIn_v2(login, password);
        }
        
        public System.Threading.Tasks.Task<bool> MayIComeIn_v2Async(string login, string password) {
            return base.Channel.MayIComeIn_v2Async(login, password);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="wcf_chat.IPrivateMessageService", CallbackContract=typeof(MyChatClient.wcf_chat.IPrivateMessageServiceCallback))]
    public interface IPrivateMessageService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrivateMessageService/CreatePrivateMessage", ReplyAction="http://tempuri.org/IPrivateMessageService/CreatePrivateMessageResponse")]
        int CreatePrivateMessage(string SenderName, string AdresseeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrivateMessageService/CreatePrivateMessage", ReplyAction="http://tempuri.org/IPrivateMessageService/CreatePrivateMessageResponse")]
        System.Threading.Tasks.Task<int> CreatePrivateMessageAsync(string SenderName, string AdresseeName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPrivateMessageService/SendPrivateMsg")]
        void SendPrivateMsg(string sender, string adressee, string msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPrivateMessageService/SendPrivateMsg")]
        System.Threading.Tasks.Task SendPrivateMsgAsync(string sender, string adressee, string msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPrivateMessageServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPrivateMessageService/OnPrivateConnected")]
        void OnPrivateConnected(string msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPrivateMessageService/OnPrivateMessageReceived")]
        void OnPrivateMessageReceived(string msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPrivateMessageService/OnPrivateMessageReceived_v2")]
        void OnPrivateMessageReceived_v2(string _sender, string _adressee, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPrivateMessageServiceChannel : MyChatClient.wcf_chat.IPrivateMessageService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PrivateMessageServiceClient : System.ServiceModel.DuplexClientBase<MyChatClient.wcf_chat.IPrivateMessageService>, MyChatClient.wcf_chat.IPrivateMessageService {
        
        public PrivateMessageServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PrivateMessageServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PrivateMessageServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PrivateMessageServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PrivateMessageServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int CreatePrivateMessage(string SenderName, string AdresseeName) {
            return base.Channel.CreatePrivateMessage(SenderName, AdresseeName);
        }
        
        public System.Threading.Tasks.Task<int> CreatePrivateMessageAsync(string SenderName, string AdresseeName) {
            return base.Channel.CreatePrivateMessageAsync(SenderName, AdresseeName);
        }
        
        public void SendPrivateMsg(string sender, string adressee, string msg) {
            base.Channel.SendPrivateMsg(sender, adressee, msg);
        }
        
        public System.Threading.Tasks.Task SendPrivateMsgAsync(string sender, string adressee, string msg) {
            return base.Channel.SendPrivateMsgAsync(sender, adressee, msg);
        }
    }
}
